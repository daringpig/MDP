/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://code.google.com/p/google-apis-client-generator/
 * (build: 2014-07-22 21:53:01 UTC)
 * on 2014-09-24 at 17:06:04 UTC 
 * Modify at your own risk.
 */

package tudelft.mdp.backend.endpoints.nfcRecordEndpoint;

/**
 * Service definition for NfcRecordEndpoint (v1).
 *
 * <p>
 * An API to manage the NFC tags
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link NfcRecordEndpointRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class NfcRecordEndpoint extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.19.0 of the nfcRecordEndpoint library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://tudelft-mdp.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "nfcRecordEndpoint/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public NfcRecordEndpoint(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  NfcRecordEndpoint(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "deleteNFC".
   *
   * This request holds the parameters needed by the nfcRecordEndpoint server.  After setting any
   * optional parameters, call the {@link DeleteNFC#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public DeleteNFC deleteNFC(java.lang.String id) throws java.io.IOException {
    DeleteNFC result = new DeleteNFC(id);
    initialize(result);
    return result;
  }

  public class DeleteNFC extends NfcRecordEndpointRequest<Void> {

    private static final String REST_PATH = "nfc/{id}";

    /**
     * Create a request for the method "deleteNFC".
     *
     * This request holds the parameters needed by the the nfcRecordEndpoint server.  After setting
     * any optional parameters, call the {@link DeleteNFC#execute()} method to invoke the remote
     * operation. <p> {@link
     * DeleteNFC#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected DeleteNFC(java.lang.String id) {
      super(NfcRecordEndpoint.this, "DELETE", REST_PATH, null, Void.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public DeleteNFC setAlt(java.lang.String alt) {
      return (DeleteNFC) super.setAlt(alt);
    }

    @Override
    public DeleteNFC setFields(java.lang.String fields) {
      return (DeleteNFC) super.setFields(fields);
    }

    @Override
    public DeleteNFC setKey(java.lang.String key) {
      return (DeleteNFC) super.setKey(key);
    }

    @Override
    public DeleteNFC setOauthToken(java.lang.String oauthToken) {
      return (DeleteNFC) super.setOauthToken(oauthToken);
    }

    @Override
    public DeleteNFC setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (DeleteNFC) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public DeleteNFC setQuotaUser(java.lang.String quotaUser) {
      return (DeleteNFC) super.setQuotaUser(quotaUser);
    }

    @Override
    public DeleteNFC setUserIp(java.lang.String userIp) {
      return (DeleteNFC) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public DeleteNFC setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public DeleteNFC set(String parameterName, Object value) {
      return (DeleteNFC) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "getNFC".
   *
   * This request holds the parameters needed by the nfcRecordEndpoint server.  After setting any
   * optional parameters, call the {@link GetNFC#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public GetNFC getNFC(java.lang.String id) throws java.io.IOException {
    GetNFC result = new GetNFC(id);
    initialize(result);
    return result;
  }

  public class GetNFC extends NfcRecordEndpointRequest<tudelft.mdp.backend.endpoints.nfcRecordEndpoint.model.NfcRecord> {

    private static final String REST_PATH = "get_nfc";

    /**
     * Create a request for the method "getNFC".
     *
     * This request holds the parameters needed by the the nfcRecordEndpoint server.  After setting
     * any optional parameters, call the {@link GetNFC#execute()} method to invoke the remote
     * operation. <p> {@link
     * GetNFC#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected GetNFC(java.lang.String id) {
      super(NfcRecordEndpoint.this, "GET", REST_PATH, null, tudelft.mdp.backend.endpoints.nfcRecordEndpoint.model.NfcRecord.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public GetNFC setAlt(java.lang.String alt) {
      return (GetNFC) super.setAlt(alt);
    }

    @Override
    public GetNFC setFields(java.lang.String fields) {
      return (GetNFC) super.setFields(fields);
    }

    @Override
    public GetNFC setKey(java.lang.String key) {
      return (GetNFC) super.setKey(key);
    }

    @Override
    public GetNFC setOauthToken(java.lang.String oauthToken) {
      return (GetNFC) super.setOauthToken(oauthToken);
    }

    @Override
    public GetNFC setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (GetNFC) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public GetNFC setQuotaUser(java.lang.String quotaUser) {
      return (GetNFC) super.setQuotaUser(quotaUser);
    }

    @Override
    public GetNFC setUserIp(java.lang.String userIp) {
      return (GetNFC) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public GetNFC setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public GetNFC set(String parameterName, Object value) {
      return (GetNFC) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "insertNFC".
   *
   * This request holds the parameters needed by the nfcRecordEndpoint server.  After setting any
   * optional parameters, call the {@link InsertNFC#execute()} method to invoke the remote operation.
   *
   * @param content the {@link tudelft.mdp.backend.endpoints.nfcRecordEndpoint.model.NfcRecord}
   * @return the request
   */
  public InsertNFC insertNFC(tudelft.mdp.backend.endpoints.nfcRecordEndpoint.model.NfcRecord content) throws java.io.IOException {
    InsertNFC result = new InsertNFC(content);
    initialize(result);
    return result;
  }

  public class InsertNFC extends NfcRecordEndpointRequest<tudelft.mdp.backend.endpoints.nfcRecordEndpoint.model.NfcRecord> {

    private static final String REST_PATH = "nfcrecord";

    /**
     * Create a request for the method "insertNFC".
     *
     * This request holds the parameters needed by the the nfcRecordEndpoint server.  After setting
     * any optional parameters, call the {@link InsertNFC#execute()} method to invoke the remote
     * operation. <p> {@link
     * InsertNFC#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link tudelft.mdp.backend.endpoints.nfcRecordEndpoint.model.NfcRecord}
     * @since 1.13
     */
    protected InsertNFC(tudelft.mdp.backend.endpoints.nfcRecordEndpoint.model.NfcRecord content) {
      super(NfcRecordEndpoint.this, "POST", REST_PATH, content, tudelft.mdp.backend.endpoints.nfcRecordEndpoint.model.NfcRecord.class);
    }

    @Override
    public InsertNFC setAlt(java.lang.String alt) {
      return (InsertNFC) super.setAlt(alt);
    }

    @Override
    public InsertNFC setFields(java.lang.String fields) {
      return (InsertNFC) super.setFields(fields);
    }

    @Override
    public InsertNFC setKey(java.lang.String key) {
      return (InsertNFC) super.setKey(key);
    }

    @Override
    public InsertNFC setOauthToken(java.lang.String oauthToken) {
      return (InsertNFC) super.setOauthToken(oauthToken);
    }

    @Override
    public InsertNFC setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (InsertNFC) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public InsertNFC setQuotaUser(java.lang.String quotaUser) {
      return (InsertNFC) super.setQuotaUser(quotaUser);
    }

    @Override
    public InsertNFC setUserIp(java.lang.String userIp) {
      return (InsertNFC) super.setUserIp(userIp);
    }

    @Override
    public InsertNFC set(String parameterName, Object value) {
      return (InsertNFC) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "listNFC".
   *
   * This request holds the parameters needed by the nfcRecordEndpoint server.  After setting any
   * optional parameters, call the {@link ListNFC#execute()} method to invoke the remote operation.
   *
   * @param count
   * @return the request
   */
  public ListNFC listNFC(java.lang.Integer count) throws java.io.IOException {
    ListNFC result = new ListNFC(count);
    initialize(result);
    return result;
  }

  public class ListNFC extends NfcRecordEndpointRequest<tudelft.mdp.backend.endpoints.nfcRecordEndpoint.model.CollectionResponseNfcRecord> {

    private static final String REST_PATH = "nfcrecord/{count}";

    /**
     * Create a request for the method "listNFC".
     *
     * This request holds the parameters needed by the the nfcRecordEndpoint server.  After setting
     * any optional parameters, call the {@link ListNFC#execute()} method to invoke the remote
     * operation. <p> {@link
     * ListNFC#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param count
     * @since 1.13
     */
    protected ListNFC(java.lang.Integer count) {
      super(NfcRecordEndpoint.this, "GET", REST_PATH, null, tudelft.mdp.backend.endpoints.nfcRecordEndpoint.model.CollectionResponseNfcRecord.class);
      this.count = com.google.api.client.util.Preconditions.checkNotNull(count, "Required parameter count must be specified.");
    }

    @Override
    public com.google.api.client.http.HttpResponse executeUsingHead() throws java.io.IOException {
      return super.executeUsingHead();
    }

    @Override
    public com.google.api.client.http.HttpRequest buildHttpRequestUsingHead() throws java.io.IOException {
      return super.buildHttpRequestUsingHead();
    }

    @Override
    public ListNFC setAlt(java.lang.String alt) {
      return (ListNFC) super.setAlt(alt);
    }

    @Override
    public ListNFC setFields(java.lang.String fields) {
      return (ListNFC) super.setFields(fields);
    }

    @Override
    public ListNFC setKey(java.lang.String key) {
      return (ListNFC) super.setKey(key);
    }

    @Override
    public ListNFC setOauthToken(java.lang.String oauthToken) {
      return (ListNFC) super.setOauthToken(oauthToken);
    }

    @Override
    public ListNFC setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ListNFC) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ListNFC setQuotaUser(java.lang.String quotaUser) {
      return (ListNFC) super.setQuotaUser(quotaUser);
    }

    @Override
    public ListNFC setUserIp(java.lang.String userIp) {
      return (ListNFC) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.Integer count;

    /**

     */
    public java.lang.Integer getCount() {
      return count;
    }

    public ListNFC setCount(java.lang.Integer count) {
      this.count = count;
      return this;
    }

    @Override
    public ListNFC set(String parameterName, Object value) {
      return (ListNFC) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "toggleNFC".
   *
   * This request holds the parameters needed by the nfcRecordEndpoint server.  After setting any
   * optional parameters, call the {@link ToggleNFC#execute()} method to invoke the remote operation.
   *
   * @param id
   * @return the request
   */
  public ToggleNFC toggleNFC(java.lang.String id) throws java.io.IOException {
    ToggleNFC result = new ToggleNFC(id);
    initialize(result);
    return result;
  }

  public class ToggleNFC extends NfcRecordEndpointRequest<tudelft.mdp.backend.endpoints.nfcRecordEndpoint.model.NfcRecord> {

    private static final String REST_PATH = "toggleNFC/{id}";

    /**
     * Create a request for the method "toggleNFC".
     *
     * This request holds the parameters needed by the the nfcRecordEndpoint server.  After setting
     * any optional parameters, call the {@link ToggleNFC#execute()} method to invoke the remote
     * operation. <p> {@link
     * ToggleNFC#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param id
     * @since 1.13
     */
    protected ToggleNFC(java.lang.String id) {
      super(NfcRecordEndpoint.this, "POST", REST_PATH, null, tudelft.mdp.backend.endpoints.nfcRecordEndpoint.model.NfcRecord.class);
      this.id = com.google.api.client.util.Preconditions.checkNotNull(id, "Required parameter id must be specified.");
    }

    @Override
    public ToggleNFC setAlt(java.lang.String alt) {
      return (ToggleNFC) super.setAlt(alt);
    }

    @Override
    public ToggleNFC setFields(java.lang.String fields) {
      return (ToggleNFC) super.setFields(fields);
    }

    @Override
    public ToggleNFC setKey(java.lang.String key) {
      return (ToggleNFC) super.setKey(key);
    }

    @Override
    public ToggleNFC setOauthToken(java.lang.String oauthToken) {
      return (ToggleNFC) super.setOauthToken(oauthToken);
    }

    @Override
    public ToggleNFC setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ToggleNFC) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ToggleNFC setQuotaUser(java.lang.String quotaUser) {
      return (ToggleNFC) super.setQuotaUser(quotaUser);
    }

    @Override
    public ToggleNFC setUserIp(java.lang.String userIp) {
      return (ToggleNFC) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String id;

    /**

     */
    public java.lang.String getId() {
      return id;
    }

    public ToggleNFC setId(java.lang.String id) {
      this.id = id;
      return this;
    }

    @Override
    public ToggleNFC set(String parameterName, Object value) {
      return (ToggleNFC) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "updateNFC".
   *
   * This request holds the parameters needed by the nfcRecordEndpoint server.  After setting any
   * optional parameters, call the {@link UpdateNFC#execute()} method to invoke the remote operation.
   *
   * @param content the {@link tudelft.mdp.backend.endpoints.nfcRecordEndpoint.model.NfcRecord}
   * @return the request
   */
  public UpdateNFC updateNFC(tudelft.mdp.backend.endpoints.nfcRecordEndpoint.model.NfcRecord content) throws java.io.IOException {
    UpdateNFC result = new UpdateNFC(content);
    initialize(result);
    return result;
  }

  public class UpdateNFC extends NfcRecordEndpointRequest<tudelft.mdp.backend.endpoints.nfcRecordEndpoint.model.NfcRecord> {

    private static final String REST_PATH = "nfcrecord";

    /**
     * Create a request for the method "updateNFC".
     *
     * This request holds the parameters needed by the the nfcRecordEndpoint server.  After setting
     * any optional parameters, call the {@link UpdateNFC#execute()} method to invoke the remote
     * operation. <p> {@link
     * UpdateNFC#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param content the {@link tudelft.mdp.backend.endpoints.nfcRecordEndpoint.model.NfcRecord}
     * @since 1.13
     */
    protected UpdateNFC(tudelft.mdp.backend.endpoints.nfcRecordEndpoint.model.NfcRecord content) {
      super(NfcRecordEndpoint.this, "PUT", REST_PATH, content, tudelft.mdp.backend.endpoints.nfcRecordEndpoint.model.NfcRecord.class);
    }

    @Override
    public UpdateNFC setAlt(java.lang.String alt) {
      return (UpdateNFC) super.setAlt(alt);
    }

    @Override
    public UpdateNFC setFields(java.lang.String fields) {
      return (UpdateNFC) super.setFields(fields);
    }

    @Override
    public UpdateNFC setKey(java.lang.String key) {
      return (UpdateNFC) super.setKey(key);
    }

    @Override
    public UpdateNFC setOauthToken(java.lang.String oauthToken) {
      return (UpdateNFC) super.setOauthToken(oauthToken);
    }

    @Override
    public UpdateNFC setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UpdateNFC) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UpdateNFC setQuotaUser(java.lang.String quotaUser) {
      return (UpdateNFC) super.setQuotaUser(quotaUser);
    }

    @Override
    public UpdateNFC setUserIp(java.lang.String userIp) {
      return (UpdateNFC) super.setUserIp(userIp);
    }

    @Override
    public UpdateNFC set(String parameterName, Object value) {
      return (UpdateNFC) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link NfcRecordEndpoint}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link NfcRecordEndpoint}. */
    @Override
    public NfcRecordEndpoint build() {
      return new NfcRecordEndpoint(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link NfcRecordEndpointRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setNfcRecordEndpointRequestInitializer(
        NfcRecordEndpointRequestInitializer nfcrecordendpointRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(nfcrecordendpointRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
